require 'torch'
require 'cutorch'
require 'cunn'
require 'optim'
require 'xlua'

require 'hdf5'

require 'StackShift'

-- The name of the image to be loaded
load_item_name = arg[1]
save_name = arg[2]

-- Use cuda flag
--use_cuda = false
use_cuda = true

-- The name of the model to load
--load_name = '/home/master/safe/test_model.dat'
load_name = '../trained_models/hybrid_temp.dat'

-- The name of the folder to load images from
-- TODO: use this to automatically grab images
--load_set_name = '/media/master/will-it-blend/generated_data/kinect_hallway/_001_sci.hdf5'

-- Save name to place images
-- Location must already exist
--save_name = '/home/master/will-it-blend/results/hybrid_hall_real_images.hdf5'

-- Network size configurations
-- TODO: make these automatic
-- The number of output classes
n_classes = 13

-- The size of the images being processed
height = 480
width = 640

-- Set the default tensor type for cpu use
torch.setdefaulttensortype("torch.FloatTensor")

-- Saves example images from the test set as hdf5 files
function save_image_examples()

	print("")
	print("Getting test image")

	-- hdf5 save file
	local hdf5_file = hdf5.open(save_name, 'w')

	-- Set to evaluate to get production mode
	model:evaluate()

	-- Make a tensor with the shape (n_images, height, width) for the predictions
	--local ex_images = torch.Tensor(ex_stop - ex_start + 1, height, width)
	local ex_images = torch.Tensor(1,height,width)

		if use_cuda then

			data_item = test_set:partial({1,height},{1,width}):cuda()

		else

			data_item = test_set:partial({1,height},{1,width})

		end

		-- Add a channel dim
		data_item = data_item:reshape(1,height,width)

		-- Time the epoch
		timer = torch.Timer()

		-- Get the forward prediction of the log probabilities
		local prediction_log_probs = model:forward(data_item)

		-- Get the class of each pixel
		local ignore, predictions = torch.max(prediction_log_probs, 2)

		-- Get the end time
		end_time = timer:time().real

		print("Time taken for forward propagation: " .. end_time)
		predictions = predictions:squeeze():type('torch.FloatTensor')

		-- Set the correct index in the output tensor
		ex_images[1] = predictions

		--count = count + 1

	--end

	-- Write the tensor to the file
	hdf5_file:write('predictions', ex_images)

	-- Close the file
	hdf5_file:close()

end

-- Load the model
model = torch.load(load_name)

if not use_cuda then

	model:float()

	print("Running on cpu")

else

	model:cuda()

	print("Running on gpu")

end

-- Open the image
whole_test_set = hdf5.open(load_item_name, 'r')

-- Get the handles for the test data and labels
test_set = whole_test_set:read('depth')

-- Get the visualizations
save_image_examples()

print("")
